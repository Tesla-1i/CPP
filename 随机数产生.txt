c rand()随机函数  
2011-09-12 15:18:29|  分类： 开发工具 |  标签：学习   
|举报
|字号
 订阅
 
 
 
 
  下载LOFTER
我的照片书  |


1. 基本函数 
    
    在C语言中取随机数所需要的函数是: 

int rand(void);
void srand (unsigned int n); 
    rand()函数和srand()函数被声明在头文件stdlib.h中,所以要使用这两个函数必须包含该头文件: 

#include <stdlib.h> 

  
2. 使用方法 
  
    rand()函数返回0到RAND_MAX之间的伪随机数(pseudorandom)。RAND_MAX常量被定义在stdlib.h头文件中。其值等于32767，或者更大。 
  
    srand()函数使用自变量n作为种子，用来初始化随机数产生器。只要把相同的种子传入srand()，然后调用rand()时，就会产生相同的随机数序列。因此，我们可以把时间作为srand()函数的种子，就可以避免重复的发生。如果，调用rand()之前没有先调用srand()，就和事先调用srand(1)所产生的结果一样。 
  
  
  

/* 例1：不指定种子的值 */ 
for (int i=0; i<10; i++)
{
    printf("%d ", rand()%10);
} 
    每次运行都将输出：1 7 4 0 9 4 8 8 2 4 

/* 例2：指定种子的值为1 */ 
srand(1);
for (int i=0; i<10; i++)
{
    printf("%d ", rand()%10);
} 
    每次运行都将输出：1 7 4 0 9 4 8 8 2 4 
    例2的输出结果与例1是完全一样的。 

/* 例3：指定种子的值为8 */
srand(8);
for (int i=0; i<10; i++)
{
    printf("%d ", rand()%10);
} 
    每次运行都将输出：4 0 1 3 5 3 7 7 1 5 
   该程序取得的随机值也是在[0,10）之间，与srand(1)所取得的值不同，但是每次运行程序的结果都相同。 

/* 例4：指定种子值为现在的时间 */
srand((unsigned)time(NULL));
for (int i=0; i<10; i++)
{
    printf("%d ", rand()%10);
} 
     该程序每次运行结果都不一样，因为每次启动程序的时间都不同。另外需要注意的是，使用time()函数前必须包含头文件time.h。 
  

  
3. 注意事项 
求一定范围内的随机数。 
     如要取[0,10)之间的随机整数，需将rand()的返回值与10求模。 

randnumber = rand() % 10; 
     那么，如果取的值不是从0开始呢？你只需要记住一个通用的公式。 
     要取[a,b)之间的随机整数（包括a，但不包括b)，使用： 
     (rand() % (b - a)) + a 
伪随机浮点数。 
     要取得0～1之间的浮点数，可以用：   
     rand() / (double)(RAND_MAX) 
     如果想取更大范围的随机浮点数，比如0～100，可以采用如下方法: 
     rand() /((double)(RAND_MAX)/100)

     其他情况，以此类推，这里不作详细说明。 
     当然，本文取伪随机浮点数的方法只是用来说明函数的使用办法，你可以采用更好的方法来实现。 
  
  
    举个例子，假设我们要取得0～10之间的随机整数（不含10本身）： 
大家可能很多次讨论过随机数在计算机中怎样产生的问题，在这篇文章中，我会对这个问题进行更深入的探讨，阐述我对这个问题的理解。 
     首先需要声明的是，计算机不会产生绝对随机的随机数，计算机只能产生“伪随机数”。其实绝对随机的随机数只是一种理想的随机数，即使计算机怎样发展，它也不会产生一串绝对随机的随机数。计算机只能生成相对的随机数，即伪随机数。 
     伪随机数并不是假随机数，这里的“伪”是有规律的意思，就是计算机产生的伪随机数既是随机的又是有规律的。怎样理解呢？产生的伪随机数有时遵守一定的规 律，有时不遵守任何规律；伪随机数有一部分遵守一定的规律；另一部分不遵守任何规律。比如“世上没有两片形状完全相同的树叶”，这正是点到了事物的特性， 即随机性，但是每种树的叶子都有近似的形状，这正是事物的共性，即规律性。从这个角度讲，你大概就会接受这样的事实了：计算机只能产生伪随机数而不能产生 绝对随机的随机数。 
  

  
     那么计算机中随机数是怎样产生的呢？有人可能会说，随机数是由“随机种子”产生的。没错，随机种子是用来产生随机数的一个数，在计算机中，这样的一个“随机种子”是一个无符号整形数。那么随机种子是从哪里获得的呢？ 
     下面看这样一个C程序： 

//rand01.c

#include<dos.h>

static unsigned int RAND_SEED;

unsigned int random(void)
{
    RAND_SEED=(RAND_SEED*123+59)%65536;
    return(RAND_SEED);
}

void random_start(void)
{
    int temp[2];
    movedata(0x0040,0x006c,FP_SEG(temp),FP_OFF(temp),4); 
    RAND_SEED=temp[0];
}

main()
{
    unsigned int i,n;
    random_start();
    for(i=0;i<10;i++)
        printf("%u\t",random());
    printf("\n");
}
     这个程序（rand01.c）完整地阐述了随机数产生的过程：
     首先，主程序调用random_start()方法，random_start()方法中的这一句我很感兴趣： 
    movedata(0x0040,0x006c,FP_SEG(temp),FP_OFF(temp),4); 
     这个 函数用来移动内存数据，其中FP_SEG（far pointer to segment）是取temp数组段地址的函数，FP_OFF（far pointer to offset）是取temp数组相对地址的函数，movedata函数的作用是把位于0040:006CH存储单元中的双字放到数组temp的声明的两个 存储单元中。这样可以通过temp数组把0040:006CH处的一个16位的数送给RAND_SEED。 
     random用来根据随机种子RAND_SEED的值计算得出随机数，其中这一句： 
     RAND_SEED = (RAND_SEED*123+59)%65536; 
     是用来计算随机数的方法，随机数的计算方法在不同的计算机中是不同的，即使在相同的计算机中安装的不同的操作系统中也是不同的。我在linux和windows下分别试过，相同的随机种子在这两种操作系统中生成的随机数是不同的，这说明它们的计算方法不同。 
     现在，我们明白随机种子是从哪儿获得的，而且知道随机数是怎样通过随机种子计算出来的了。那么，随机种子为什么要在内存的0040:006CH处取？0040:006CH处存放的是什么？ 
     学过《计算机组成原理与接口技术》这门课的人可能会记得在编制ROM BIOS时钟中断服务程序时会用到Intel 8253定时/计数器，它与Intel 8259中断芯片的通信使得中断服务程序得以运转，主板每秒产生的18.2次中断正是处理器根据定时/记数器值控制中断芯片产生的。在我们计算机的主机板 上都会有这样一个定时/记数器用来计算当前系统时间，每过一个时钟信号周期都会使记数器加一，而这个记数器的值存放在哪儿呢？没错，就在内存的 0040:006CH处，其实这一段内存空间是这样定义的： 
       TIMER_LOW     DW ? ；地址为 0040:006CH
      TIMER_HIGH    DW ? ；地址为 0040:006EH
      TIMER_OFT     DB ? ；地址为 0040:0070H 
      时钟中断服务程序中，每当TIMER_LOW转满时，此时，记数器也会转满，记数器的值归零，即TIMER_LOW处的16位二进制归零，而TIMER_HIGH加一。rand01.c中的 
     movedata(0x0040,0x006c,FP_SEG(temp),FP_OFF(temp),4); 
      正是把TIMER_LOW和TIMER_HIGH两个16位二进制数放进temp数组，再送往RAND_SEED，从而获得了“随机种子”。 
      现在，可以确定的一点是，随机种子来自系统时钟，确切地说，是来自计算机主板上的定时/计数器在内存中的记数值。这样，我们总结一下前面的分析，并讨论一下这些结论在程序中的应用： 
     1.随机数是由随机种子根据一定的计算方法计算出来的数值。所以，只要计算方法一定，随机种子一定，那么产生的随机数就不会变。 
     看下面这个C++程序： 

//rand02.cpp

#include <iostream>
#include <ctime>
using namespace std;

int main()
{
    unsigned int seed = 5;
    srand(seed);
    unsigned int r = rand();
    cout << r << endl;
} 
      在相同的平台环境下，编译生成exe后，每次运行它，显示的随机数都是一样的。这是因为在相同的编译平台环境下，由随机种子生成随机数的计算方法都是一样的，再加上随机种子一样，所以产生的随机数就是一样的。 
      2.只要用户或第三方不设置随机种子，那么在默认情况下随机种子来自系统时钟（即定时/计数器的值） 
     看下面这个C++程序： 

//rand03.cpp

#include <iostream>
#include <ctime>
using namespace std;

int main()
{ 
    srand((unsigned)time(NULL));
    unsigned int r = rand();
   cout << r << endl;
    return 0;
} 
     这里用户和其他程序没有设定随机种子，则使用系统定时/计数器的值做为随机种子，所以，在相同的平台环境下，编译生成exe后，每次运行它，显示的随机数会是伪随机数，即每次运行显示的结果会有不同。 

3.建议：如果想在一个程序中生成随机数序列，需要至多在生成随机数之前设置一次随机种子。 
    看下面这个用来生成一个随机字符串的C++程序： 
//rand04.cpp

#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    int rNum,m = 20;
    char *ch = new char[m];

    for ( int i = 0; i < m; i++ ) 
    {
        //大家看到了，随机种子会随着for循环在程序中设置多次
        srand((unsigned)time(NULL));
        rNum = 1+(int)((rand()/(double)RAND_MAX)*36); //求随机值

        switch (rNum) 
        {
        case 1: ch[i]='a';
            break ;
        case 2: ch[i]='b';
            break ;
        case 3: ch[i]='c';
           break ;
        case 4: ch[i]='d';
            break ;
        case 5: ch[i]='e';
            break ;
        case 6: ch[i]='f';
            break ;
        case 7: ch[i]='g';
            break ;
        case 8: ch[i]='h';
            break ;
        case 9: ch[i]='i';
            break ;
        case 10: ch[i]='j';
           break ;
        case 11: ch[i]='k';
           break ;
       case 12: ch[i]='l';
            break ;
        case 13: ch[i]='m';
            break ;
        case 14: ch[i]='n';
            break ;
        case 15: ch[i]='o';
            break ;
        case 16: ch[i]='p';
           break ;
        case 17: ch[i]='q';
           break ;
        case 18: ch[i]='r';
            break ;
        case 19: ch[i]='s';
            break ;
        case 20: ch[i]='t';
            break ;
        case 21: ch[i]='u';
            break ;
        case 22: ch[i]='v';
            break ;
        case 23: ch[i]='w';
           break ;
        case 24: ch[i]='x';
            break ;
        case 25: ch[i]='y';
           break ;
        case 26: ch[i]='z';
            break ;
        case 27:ch[i]='0';
            break;
        case 28:ch[i]='1';
            break;
        case 29:ch[i]='2';
           break;
        case 30:ch[i]='3';
            break;
        case 31:ch[i]='4';
           break;
        case 32:ch[i]='5';
           break;
        case 33:ch[i]='6';
           break;
        case 34:ch[i]='7';
            break;
        case 35:ch[i]='8';
            break;
       case 36:ch[i]='9';
            break;
      }//end of switch

      cout << ch[i];
   }//end of for loop

cout << endl; 
    delete []ch;
   return 0;
} 
而运行结果显示的随机字符串的每一个字符都是一样的，也就是说生成的字符序列不随机，所以我们需要把srand((unsigned)time(NULL)); 从for循环中移出放在for语句前面，这样可以生成随机的字符序列，而且每次运行生成的字符序列会不同（呵呵，也有可能相同，不过出现这种情况的几率太小了）。
     
      如果你把srand((unsigned)time(NULL));改成srand(2);这样虽然在一次运行中产生的字符序列是随机的，但是每次运行时产生的随机字符序列串是相同的。把srand这一句从程序中去掉也是这样。 
     此外，你可能会遇到这种情况，在使用timer控件编制程序的时候会发现用相同的时间间隔生成的一组随机数会显得有规律，而由用户按键command事件 产生的一组随机数却显得比较随机，为什么？根据我们上面的分析，你可以很快想出答案。这是因为timer是由计算机时钟记数器精确控制时间间隔的控件，时 间间隔相同，记数器前后的值之差相同，这样时钟取值就是呈线性规律的，所以随机种子是呈线性规律的，生成的随机数也是有规律的。而用户按键事件产生随机数 确实更呈现随机性，因为事件是由人按键引起的，而人不能保证严格的按键时间间隔，即使严格地去做，也不可能完全精确做到，只要时间间隔相差一微秒，记数器 前后的值之差就不相同了，随机种子的变化就失去了线性规律，那么生成的随机数就更没有规律了，所以这样生成的一组随机数更随机。这让我想到了各种晚会的抽 奖程序，如果用人来按键产生幸运观众的话，那就会很好的实现随机性原则，结果就会更公正。 
  
  
    最后，我总结两个要点：
    1.计算机的伪随机数是由随机种子根据一定的计算方法计算出来的数值。所以，只要计算方法一定，随机种子一定，那么产生的随机数就是固定的。
    2.只要用户或第三方不设置随机种子，那么在默认情况下随机种子来自系统时钟。 